{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My-SQL-Journey Embarking on the SQL Learning Path This repository documents my personal journey to master Structured Query Language (SQL) through hands-on practice. The primary source of exercises and challenges comes from LeetCode's SQL problem set. The goal is not just to solve problems, but to deeply understand the underlying concepts and develop proficiency in writing efficient and effective SQL queries. Each solved LeetCode problem will be committed to this repository with: Clear and well-commented SQL code: Explaining the logic and reasoning behind the solution. Potentially multiple solutions: Exploring different approaches and their trade-offs. Reflections and insights: Sharing what I learned from the problem and any challenges encountered. What You'll Find Here As this journey progresses, you'll find solutions covering a wide range of SQL topics, including: Basic Queries: CREATE , INSERT , SELECT , FROM , WHERE , ORDER BY , LIMIT , DISTINCT Filtering and Sorting: Using operators like AND , OR , NOT , IN , BETWEEN , LIKE Aggregate Functions: COUNT() , SUM() , AVG() , MIN() , MAX() , GROUP BY , HAVING Joins: INNER JOIN , LEFT JOIN , RIGHT JOIN , FULL OUTER JOIN Subqueries: Using queries within other queries Set Operations: UNION , UNION ALL , INTERSECT , EXCEPT Window Functions: Performing calculations across a set of table rows Schema Design Considerations: Thoughts on table structures and relationships (where applicable in problem context) Optimization Techniques: Exploring ways to write more performant SQL (when relevant to the problem) Potentially explorations of different SQL dialects: (e.g., MySQL, PostgreSQL, SQLite - depending on LeetCode problem context) Progress Tracking: Observing the evolution of my SQL skills over time. Who Might Find This Useful? Fellow SQL Learners: You can follow my progress, compare your solutions, and potentially learn from my insights and mistakes. Aspiring Data Analysts and Engineers: Get a practical view of how SQL is used to solve real-world-like problems. Developers Looking to Brush Up on SQL: See practical examples of various SQL concepts in action. Anyone Curious About the Process of Learning SQL: Witness the journey of building SQL proficiency through consistent practice. How to Navigate This Repository Each LeetCode problem will likely have its own clearly named file. The filenames will ideally correspond to the LeetCode problem number and title for easy reference. Comments within the SQL files will provide explanations and context. Join the Journey! Feel free to explore the solutions, provide feedback, or even suggest alternative approaches. Learning is a collaborative process, and I welcome any constructive input. Let's learn SQL together! License This repository is licensed under the MIT License . Contact [diptunazmulalam@gmail.com] Nazmul Alam Diptu","title":"Home"},{"location":"#my-sql-journey","text":"","title":"My-SQL-Journey"},{"location":"#embarking-on-the-sql-learning-path","text":"This repository documents my personal journey to master Structured Query Language (SQL) through hands-on practice. The primary source of exercises and challenges comes from LeetCode's SQL problem set. The goal is not just to solve problems, but to deeply understand the underlying concepts and develop proficiency in writing efficient and effective SQL queries. Each solved LeetCode problem will be committed to this repository with: Clear and well-commented SQL code: Explaining the logic and reasoning behind the solution. Potentially multiple solutions: Exploring different approaches and their trade-offs. Reflections and insights: Sharing what I learned from the problem and any challenges encountered.","title":"Embarking on the SQL Learning Path"},{"location":"#what-youll-find-here","text":"As this journey progresses, you'll find solutions covering a wide range of SQL topics, including: Basic Queries: CREATE , INSERT , SELECT , FROM , WHERE , ORDER BY , LIMIT , DISTINCT Filtering and Sorting: Using operators like AND , OR , NOT , IN , BETWEEN , LIKE Aggregate Functions: COUNT() , SUM() , AVG() , MIN() , MAX() , GROUP BY , HAVING Joins: INNER JOIN , LEFT JOIN , RIGHT JOIN , FULL OUTER JOIN Subqueries: Using queries within other queries Set Operations: UNION , UNION ALL , INTERSECT , EXCEPT Window Functions: Performing calculations across a set of table rows Schema Design Considerations: Thoughts on table structures and relationships (where applicable in problem context) Optimization Techniques: Exploring ways to write more performant SQL (when relevant to the problem) Potentially explorations of different SQL dialects: (e.g., MySQL, PostgreSQL, SQLite - depending on LeetCode problem context) Progress Tracking: Observing the evolution of my SQL skills over time.","title":"What You'll Find Here"},{"location":"#who-might-find-this-useful","text":"Fellow SQL Learners: You can follow my progress, compare your solutions, and potentially learn from my insights and mistakes. Aspiring Data Analysts and Engineers: Get a practical view of how SQL is used to solve real-world-like problems. Developers Looking to Brush Up on SQL: See practical examples of various SQL concepts in action. Anyone Curious About the Process of Learning SQL: Witness the journey of building SQL proficiency through consistent practice.","title":"Who Might Find This Useful?"},{"location":"#how-to-navigate-this-repository","text":"Each LeetCode problem will likely have its own clearly named file. The filenames will ideally correspond to the LeetCode problem number and title for easy reference. Comments within the SQL files will provide explanations and context.","title":"How to Navigate This Repository"},{"location":"#join-the-journey","text":"Feel free to explore the solutions, provide feedback, or even suggest alternative approaches. Learning is a collaborative process, and I welcome any constructive input. Let's learn SQL together!","title":"Join the Journey!"},{"location":"#license","text":"This repository is licensed under the MIT License .","title":"License"},{"location":"#contact","text":"[diptunazmulalam@gmail.com] Nazmul Alam Diptu","title":"Contact"},{"location":"tutorials/","text":"My-SQL-Journey This document chronicles my experiences and lessons learned while working with MySQL, including tips, best practices, and common pitfalls. Table of Contents Section 1:CREATE STATEMENT Subsection 1.1: CREATE Database Subsection 1.2: CREATE Table Section 1:INSERT STATEMENT Subsection 1.1: INSERT Single Row Subsection 1.2: INSERT Multiple Row List: 1683. Invalid Tweets","title":"tutorials"},{"location":"tutorials/#my-sql-journey","text":"This document chronicles my experiences and lessons learned while working with MySQL, including tips, best practices, and common pitfalls.","title":"My-SQL-Journey"},{"location":"tutorials/#table-of-contents","text":"Section 1:CREATE STATEMENT Subsection 1.1: CREATE Database Subsection 1.2: CREATE Table Section 1:INSERT STATEMENT Subsection 1.1: INSERT Single Row Subsection 1.2: INSERT Multiple Row List: 1683. Invalid Tweets","title":"Table of Contents"},{"location":"tutorials/1683/","text":"1683. Invalid Tweets Problem Statement Write a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15. Return the result table in any order. Solution The provided solution utilizes a simple SELECT statement combined with a length checking function: SELECT tweet_id FROM Tweets WHERE LENGTH ( content ) > 15 ;","title":"1683"},{"location":"tutorials/1683/#problem-statement","text":"Write a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15. Return the result table in any order.","title":"Problem Statement"},{"location":"tutorials/1683/#solution","text":"The provided solution utilizes a simple SELECT statement combined with a length checking function: SELECT tweet_id FROM Tweets WHERE LENGTH ( content ) > 15 ;","title":"Solution"},{"location":"tutorials/create/","text":"\ud83d\udcda MySQL 1.1: CREATE DATABASE Statement \ud83d\udcda MySQL 1.2: CREATE TABLE Statement \ud83d\udcda References MySQL CREATE Database Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda MySQL 1.1: CREATE DATABASE Statement"},{"location":"tutorials/create/#mysql-11-create-database-statement","text":"","title":"\ud83d\udcda MySQL 1.1: CREATE DATABASE Statement"},{"location":"tutorials/create/#mysql-12-create-table-statement","text":"","title":"\ud83d\udcda MySQL 1.2: CREATE TABLE Statement"},{"location":"tutorials/create/#references","text":"MySQL CREATE Database Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda References"},{"location":"tutorials/createdb/","text":"\ud83d\udcda MySQL 1.1: CREATE DATABASE Statement The CREATE DATABASE statement in MySQL is used to create a new database where you can later create tables, views, and store data. Let's learn it with a simple example: Example: Create a Database Named demo CREATE DATABASE IF NOT EXISTS demo ; CREATE DATABASE: CREATE DATABASE command creates a new database in the MySQL server. demo : This is the name of the new database.You can choose any valid name, but it must be unique (not already existing). Naming Rules: Use only letters, numbers, and underscores (_).Avoid using spaces or special characters. How to See All Databases SHOW DATABASES ; \ud83d\udcda References MySQL CREATE Database Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda MySQL 1.1: CREATE DATABASE Statement"},{"location":"tutorials/createdb/#mysql-11-create-database-statement","text":"The CREATE DATABASE statement in MySQL is used to create a new database where you can later create tables, views, and store data. Let's learn it with a simple example:","title":"\ud83d\udcda MySQL 1.1: CREATE DATABASE Statement"},{"location":"tutorials/createdb/#example-create-a-database-named-demo","text":"CREATE DATABASE IF NOT EXISTS demo ;","title":"Example: Create a Database Named demo"},{"location":"tutorials/createdb/#create-database","text":"CREATE DATABASE command creates a new database in the MySQL server. demo : This is the name of the new database.You can choose any valid name, but it must be unique (not already existing).","title":"CREATE DATABASE:"},{"location":"tutorials/createdb/#naming-rules","text":"Use only letters, numbers, and underscores (_).Avoid using spaces or special characters.","title":"Naming Rules:"},{"location":"tutorials/createdb/#how-to-see-all-databases","text":"SHOW DATABASES ;","title":"How to See All Databases"},{"location":"tutorials/createdb/#references","text":"MySQL CREATE Database Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda References"},{"location":"tutorials/createtb/","text":"\ud83d\udcda MySQL 1.2: CREATE TABLE Statement For now we will create an example table, later we will make necessary improvents. The CREATE TABLE statement in MySQL is used to create a new table in a database. Let's understand it using a real-world example: Example: employees Table CREATE TABLE IF NOT EXISTS employees ( EMPLOYEE_ID int ( 6 ) PRIMARY KEY AUTO_INCREMENT , FIRST_NAME varchar ( 20 ), LAST_NAME varchar ( 25 ) NOT NULL , EMAIL varchar ( 25 ) NOT NULL , PHONE_NUMBER varchar ( 20 ), HIRE_DATE date NOT NULL , JOB_ID varchar ( 10 ) NOT NULL , SALARY decimal ( 8 , 2 ), COMMISSION_PCT decimal ( 2 , 2 ), MANAGER_ID int ( 6 ), DEPTARTMENT_ID int ( 4 ) ); Key Concepts Highlighted: PRIMARY KEY : Uniquely identifies each record in the table. AUTO_INCREMENT : Automatically increases EMPLOYEE_ID for each new row. NOT NULL : Column must always have a value (cannot be left empty). varchar(n) : Stores a variable-length string with a maximum of n characters. decimal(m,d) : Numbers with fixed precision. m = total digits, d = digits after decimal point. date : Stores dates in YYYY-MM-DD format. \ud83d\udcda References MySQL CREATE TABLE Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda MySQL 1.2: CREATE TABLE Statement"},{"location":"tutorials/createtb/#mysql-12-create-table-statement","text":"For now we will create an example table, later we will make necessary improvents. The CREATE TABLE statement in MySQL is used to create a new table in a database. Let's understand it using a real-world example:","title":"\ud83d\udcda MySQL 1.2: CREATE TABLE Statement"},{"location":"tutorials/createtb/#example-employees-table","text":"CREATE TABLE IF NOT EXISTS employees ( EMPLOYEE_ID int ( 6 ) PRIMARY KEY AUTO_INCREMENT , FIRST_NAME varchar ( 20 ), LAST_NAME varchar ( 25 ) NOT NULL , EMAIL varchar ( 25 ) NOT NULL , PHONE_NUMBER varchar ( 20 ), HIRE_DATE date NOT NULL , JOB_ID varchar ( 10 ) NOT NULL , SALARY decimal ( 8 , 2 ), COMMISSION_PCT decimal ( 2 , 2 ), MANAGER_ID int ( 6 ), DEPTARTMENT_ID int ( 4 ) );","title":"Example: employees Table"},{"location":"tutorials/createtb/#key-concepts-highlighted","text":"PRIMARY KEY : Uniquely identifies each record in the table. AUTO_INCREMENT : Automatically increases EMPLOYEE_ID for each new row. NOT NULL : Column must always have a value (cannot be left empty). varchar(n) : Stores a variable-length string with a maximum of n characters. decimal(m,d) : Numbers with fixed precision. m = total digits, d = digits after decimal point. date : Stores dates in YYYY-MM-DD format.","title":"Key Concepts Highlighted:"},{"location":"tutorials/createtb/#references","text":"MySQL CREATE TABLE Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda References"},{"location":"tutorials/insert/","text":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Single Row) \ud83d\udcda MySQL 2.1: INSERT INTO Statement (Multiple Row) \ud83d\udcda References MySQL INSERT Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Single Row)"},{"location":"tutorials/insert/#mysql-21-insert-into-statement-single-row","text":"","title":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Single Row)"},{"location":"tutorials/insert/#mysql-21-insert-into-statement-multiple-row","text":"","title":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Multiple Row)"},{"location":"tutorials/insert/#_1","text":"","title":""},{"location":"tutorials/insert/#references","text":"MySQL INSERT Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda References"},{"location":"tutorials/insertml/","text":"\ud83d\udcda MySQL 2.2: INSERT INTO Statement (Multiple Rows) In MySQL, you can insert multiple rows at once using a single INSERT INTO statement. This method is faster and more efficient than inserting rows one by one. \u2728 Basic Syntax INSERT INTO table_name ( column1 , column2 , column3 , ...) VALUES ( value1a , value2a , value3a , ...), ( value1b , value2b , value3b , ...), ( value1c , value2c , value3c , ...); Key concepts table_name : Name of the table. Each set of parentheses () contains the values for one row. -Multiple rows are separated by commas , Insert multiple employees at once: INSERT INTO employees ( FIRST_NAME , LAST_NAME , EMAIL , PHONE_NUMBER , HIRE_DATE , JOB_ID , SALARY , COMMISSION_PCT , MANAGER_ID , DEPARTMENT_ID ) VALUES ( 'Alice' , 'Brown' , 'alice.brown@example.com' , '111-222-3333' , '2024-04-26' , 'HR02' , 55000 . 00 , 0 . 03 , 101 , 20 ), ( 'Bob' , 'Green' , 'bob.green@example.com' , '444-555-6666' , '2024-04-26' , 'DEV02' , 70000 . 00 , 0 . 05 , 102 , 30 ), ( 'Charlie' , 'White' , 'charlie.white@example.com' , '777-888-9999' , '2024-04-26' , 'SALES01' , 65000 . 00 , 0 . 04 , 103 , 40 ); Key Concepts: Three rows are inserted with a single command. EMPLOYEE_ID is auto-generated for each inserted row. Insert Without Listing Columns You can insert multiple rows without listing column names (be careful with the order) INSERT INTO employees VALUES ( NULL , 'David' , 'King' , 'david.king@example.com' , '123-123-1234' , '2024-04-26' , 'MGR01' , 80000 . 00 , 0 . 06 , 100 , 50 ), ( NULL , 'Eva' , 'Stone' , 'eva.stone@example.com' , '321-321-4321' , '2024-04-26' , 'DEV03' , 62000 . 00 , 0 . 02 , 101 , 20 ); \ud83d\udcda References MySQL INSERT Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda MySQL 2.2: INSERT INTO Statement (Multiple Rows)"},{"location":"tutorials/insertml/#mysql-22-insert-into-statement-multiple-rows","text":"In MySQL, you can insert multiple rows at once using a single INSERT INTO statement. This method is faster and more efficient than inserting rows one by one.","title":"\ud83d\udcda MySQL 2.2: INSERT INTO Statement (Multiple Rows)"},{"location":"tutorials/insertml/#basic-syntax","text":"INSERT INTO table_name ( column1 , column2 , column3 , ...) VALUES ( value1a , value2a , value3a , ...), ( value1b , value2b , value3b , ...), ( value1c , value2c , value3c , ...);","title":"\u2728 Basic Syntax"},{"location":"tutorials/insertml/#key-concepts","text":"table_name : Name of the table. Each set of parentheses () contains the values for one row. -Multiple rows are separated by commas ,","title":"Key concepts"},{"location":"tutorials/insertml/#insert-multiple-employees-at-once","text":"INSERT INTO employees ( FIRST_NAME , LAST_NAME , EMAIL , PHONE_NUMBER , HIRE_DATE , JOB_ID , SALARY , COMMISSION_PCT , MANAGER_ID , DEPARTMENT_ID ) VALUES ( 'Alice' , 'Brown' , 'alice.brown@example.com' , '111-222-3333' , '2024-04-26' , 'HR02' , 55000 . 00 , 0 . 03 , 101 , 20 ), ( 'Bob' , 'Green' , 'bob.green@example.com' , '444-555-6666' , '2024-04-26' , 'DEV02' , 70000 . 00 , 0 . 05 , 102 , 30 ), ( 'Charlie' , 'White' , 'charlie.white@example.com' , '777-888-9999' , '2024-04-26' , 'SALES01' , 65000 . 00 , 0 . 04 , 103 , 40 );","title":"Insert multiple employees at once:"},{"location":"tutorials/insertml/#key-concepts_1","text":"Three rows are inserted with a single command. EMPLOYEE_ID is auto-generated for each inserted row.","title":"Key Concepts:"},{"location":"tutorials/insertml/#insert-without-listing-columns","text":"You can insert multiple rows without listing column names (be careful with the order) INSERT INTO employees VALUES ( NULL , 'David' , 'King' , 'david.king@example.com' , '123-123-1234' , '2024-04-26' , 'MGR01' , 80000 . 00 , 0 . 06 , 100 , 50 ), ( NULL , 'Eva' , 'Stone' , 'eva.stone@example.com' , '321-321-4321' , '2024-04-26' , 'DEV03' , 62000 . 00 , 0 . 02 , 101 , 20 );","title":"Insert Without Listing Columns"},{"location":"tutorials/insertml/#references","text":"MySQL INSERT Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda References"},{"location":"tutorials/insertsg/","text":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Single Row) The INSERT INTO statement is used to add new rows into a table in MySQL. Let's learn how to insert a single row step-by-step! \u2728 Basic Syntax INSERT INTO table_name ( column1 , column2 , column3 , ...) VALUES ( value1 , value2 , value3 , ...); EXample INSERT INTO employees ( FIRST_NAME , LAST_NAME , EMAIL , PHONE_NUMBER , HIRE_DATE , JOB_ID , SALARY , COMMISSION_PCT , MANAGER_ID , DEPARTMENT_ID ) VALUES ( 'John' , 'Doe' , 'john.doe@example.com' , '123-456-7890' , '2024-04-26' , 'DEV01' , 60000 . 00 , 0 . 05 , 101 , 10 ); Key Points to Remember Always list column names in the same order as the values. String values (varchar, date) must be enclosed in single quotes '...' Numeric values (int, decimal) are written without quotes. You can omit columns that have default values or are set to auto-increment. Insert Without Specifying Columns If you want to insert values into all columns (except auto-increment ones) in exact order, you can simplify: INSERT INTO employees VALUES ( NULL , 'Jane' , 'Smith' , 'jane.smith@example.com' , '987-654-3210' , '2024-04-26' , 'HR01' , 50000 . 00 , 0 . 02 , 102 , 20 ); \ud83d\udcda References MySQL INSERT Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Single Row)"},{"location":"tutorials/insertsg/#mysql-21-insert-into-statement-single-row","text":"The INSERT INTO statement is used to add new rows into a table in MySQL. Let's learn how to insert a single row step-by-step!","title":"\ud83d\udcda MySQL 2.1: INSERT INTO Statement (Single Row)"},{"location":"tutorials/insertsg/#basic-syntax","text":"INSERT INTO table_name ( column1 , column2 , column3 , ...) VALUES ( value1 , value2 , value3 , ...);","title":"\u2728 Basic Syntax"},{"location":"tutorials/insertsg/#example","text":"INSERT INTO employees ( FIRST_NAME , LAST_NAME , EMAIL , PHONE_NUMBER , HIRE_DATE , JOB_ID , SALARY , COMMISSION_PCT , MANAGER_ID , DEPARTMENT_ID ) VALUES ( 'John' , 'Doe' , 'john.doe@example.com' , '123-456-7890' , '2024-04-26' , 'DEV01' , 60000 . 00 , 0 . 05 , 101 , 10 );","title":"EXample"},{"location":"tutorials/insertsg/#key-points-to-remember","text":"Always list column names in the same order as the values. String values (varchar, date) must be enclosed in single quotes '...' Numeric values (int, decimal) are written without quotes. You can omit columns that have default values or are set to auto-increment.","title":"Key Points to Remember"},{"location":"tutorials/insertsg/#insert-without-specifying-columns","text":"If you want to insert values into all columns (except auto-increment ones) in exact order, you can simplify: INSERT INTO employees VALUES ( NULL , 'Jane' , 'Smith' , 'jane.smith@example.com' , '987-654-3210' , '2024-04-26' , 'HR01' , 50000 . 00 , 0 . 02 , 102 , 20 );","title":"Insert Without Specifying Columns"},{"location":"tutorials/insertsg/#references","text":"MySQL INSERT Tutorial \u2013 MySQL Tutorial","title":"\ud83d\udcda References"}]}